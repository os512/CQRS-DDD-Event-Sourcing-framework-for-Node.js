"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8456],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,k=m["".concat(i,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:a,l[1]=d;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1859:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>d,contentTitle:()=>i,metadata:()=>c,toc:()=>s,default:()=>m});var r=n(2685),a=n(1244),o=(n(7378),n(5318)),l=["components"],d={id:"connector",title:"Connector",description:"This document describes the interface that a read model connector should expose."},i=void 0,c={unversionedId:"api/read-model/connector",id:"api/read-model/connector",isDocsHomePage:!1,title:"Connector",description:"This document describes the interface that a read model connector should expose.",source:"@site/../docs/api/read-model/connector.md",sourceDirName:"api/read-model",slug:"/api/read-model/connector",permalink:"/resolve/docs/api/read-model/connector",tags:[],version:"current",frontMatter:{id:"connector",title:"Connector",description:"This document describes the interface that a read model connector should expose."},sidebar:"docs",previous:{title:"Store",permalink:"/resolve/docs/api/read-model/store"},next:{title:"Projection",permalink:"/resolve/docs/api/view-model/projection"}},s=[{value:"connect",id:"connect",children:[]},{value:"disconnect",id:"disconnect",children:[]},{value:"drop",id:"drop",children:[]},{value:"dispose",id:"dispose",children:[]}],p={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The table below lists functions a custom Read Model's connector should implement."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Function Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#connect"},"connect")),(0,o.kt)("td",{parentName:"tr",align:null},"Initializes a connection to storage.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#disconnect"},"disconnect")),(0,o.kt)("td",{parentName:"tr",align:null},"Closes the storage connection.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#drop"},"drop")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes the Read Model's data from storage.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#dispose"},"dispose")),(0,o.kt)("td",{parentName:"tr",align:null},"Dispose of this connector's unmanaged resources.")))),(0,o.kt)("h3",{id:"connect"},"connect"),(0,o.kt)("p",null,"Initializes a connection to storage. An implementation should return a store object."),(0,o.kt)("h4",{id:"arguments"},"Arguments"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"readModelName"),(0,o.kt)("td",{parentName:"tr",align:null},"A read model for which to establish a connection.")))),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const connect = async readModelName => {\n  fs.writeFileSync(`${prefix}${readModelName}.lock`, true, { flag: 'wx' })\n  readModels.add(readModelName)\n  const store = {\n    get() {\n      return JSON.parse(String(fs.readFileSync(`${prefix}${readModelName}`)))\n    },\n    set(value) {\n      fs.writeFileSync(`${prefix}${readModelName}`, JSON.stringify(value))\n    }\n  }\n  return store\n}\n")),(0,o.kt)("h3",{id:"disconnect"},"disconnect"),(0,o.kt)("p",null,"Closes the storage connection."),(0,o.kt)("h4",{id:"arguments-1"},"Arguments"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"store"),(0,o.kt)("td",{parentName:"tr",align:null},"A store object.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"readModelName"),(0,o.kt)("td",{parentName:"tr",align:null},"The read model to disconnect.")))),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const disconnect = async (store, readModelName) => {\n  safeUnlinkSync(`${prefix}${readModelName}.lock`)\n  readModels.delete(readModelName)\n}\n")),(0,o.kt)("h3",{id:"drop"},"drop"),(0,o.kt)("p",null,"Removes the Read Model's data from storage."),(0,o.kt)("h4",{id:"arguments-2"},"Arguments"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"store"),(0,o.kt)("td",{parentName:"tr",align:null},"A store object.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"readModelName"),(0,o.kt)("td",{parentName:"tr",align:null},"A Read Model whose data to remove.")))),(0,o.kt)("h4",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const drop = async (store, readModelName) => {\n  safeUnlinkSync(`${prefix}${readModelName}.lock`)\n  safeUnlinkSync(`${prefix}${readModelName}`)\n}\n")),(0,o.kt)("h3",{id:"dispose"},"dispose"),(0,o.kt)("p",null,"Dispose of all unmanaged resources provided by this connector."),(0,o.kt)("h4",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const dispose = async () => {\n  for (const readModelName of readModels) {\n    safeUnlinkSync(`${prefix}${readModelName}.lock`)\n  }\n  readModels.clear()\n}\n")))}m.isMDXComponent=!0}}]);