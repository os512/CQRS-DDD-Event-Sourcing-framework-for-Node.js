"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8519],{8359:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>p,toc:()=>d,default:()=>u});var r=n(2685),a=n(1244),l=(n(7378),n(5318)),o=["components"],i={id:"frontend",title:"Frontend",description:"This document describes techniques that you can use to implement a frontend for a reSolve application."},s=void 0,p={unversionedId:"frontend",id:"frontend",title:"Frontend",description:"This document describes techniques that you can use to implement a frontend for a reSolve application.",source:"@site/../docs/frontend.md",sourceDirName:".",slug:"/frontend",permalink:"/resolve/docs/frontend",tags:[],version:"current",frontMatter:{id:"frontend",title:"Frontend",description:"This document describes techniques that you can use to implement a frontend for a reSolve application."},sidebar:"docs",previous:{title:"Middleware",permalink:"/resolve/docs/middleware"},next:{title:"reSolve App Structure",permalink:"/resolve/docs/app-structure"}},d=[{value:"Client Application Entry Point",id:"client-application-entry-point",children:[{value:"Basic Entry Point",id:"basic-entry-point",children:[],level:3},{value:"SSR Handlers",id:"ssr-handlers",children:[],level:3}],level:2},{value:"HTTP API",id:"http-api",children:[{value:"Example",id:"example",children:[],level:3}],level:2},{value:"@resolve-js/client library",id:"resolve-jsclient-library",children:[{value:"Example",id:"example-1",children:[],level:3}],level:2},{value:"@resolve-js/redux library",id:"resolve-jsredux-library",children:[{value:"React Hooks",id:"react-hooks",children:[],level:3},{value:"Higher-Order Components",id:"higher-order-components",children:[],level:3},{value:"Example",id:"example-2",children:[],level:3}],level:2},{value:"@resolve-js/react-hooks library",id:"resolve-jsreact-hooks-library",children:[{value:"Example",id:"example-3",children:[],level:3}],level:2}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This document describes techniques that you can use to implement a frontend for a reSolve application. The following techniques are available:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#http-api"},"HTTP API")," - An HTTP API exposed by a reSolve server."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#resolve-jsclient-library"},"@resolve-js/client library")," - A higher-level JavaScript library used to communicate with a reSolve server."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#resolve-jsredux-library"},"@resolve-js/redux library")," - A library used to connect a React + Redux component to reSolve."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#resolve-jsreact-hooks-library"},"@resolve-js/react-hooks library")," - A hook-based library used to connect React components to reSolve.")),(0,l.kt)("h2",{id:"client-application-entry-point"},"Client Application Entry Point"),(0,l.kt)("h3",{id:"basic-entry-point"},"Basic Entry Point"),(0,l.kt)("p",null,"A client script should export a function that is the script's entry point. This function takes the reSolve context as the parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const main = async resolveContext => {\n...\n}\nexport default main\n")),(0,l.kt)("p",null,"To register the entry point, assign the path to the file that contains the entry point definition to the ",(0,l.kt)("inlineCode",{parentName:"p"},"clientEntries")," ",(0,l.kt)("a",{parentName:"p",href:"/resolve/docs/application-configuration#cliententries"},"configuration option"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"clientEntries: ['client/index.js']\n")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"resolveContext")," object to initialize a client library. The code samples below demonstrate how to configure the entry point for different client libraries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"@resolve-js/client:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { getClient } from '@resolve-js/client'\nconst main = async resolveContext => {\n  await new Promise(resolve => domready(resolve))\n  const client = getClient(resolveContext)\n  const { data } = await client.query({\n    name: 'chat',\n    aggregateIds: '*'\n  })\n  ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"@resolve-js/redux:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { createResolveStore, ResolveReduxProvider } from '@resolve-js/redux'\n\nconst entryPoint = (clientContext) => {\n  const store = createResolveStore(clientContext, {\n    serializedState: window.__INITIAL_STATE__,\n    redux: getRedux(),\n  })\n  const routes = getRoutes()\n  render(\n    <ResolveReduxProvider context={clientContext} store={store}>\n      <BrowserRouter>{renderRoutes(routes)}</BrowserRouter>\n    </ResolveReduxProvider>,\n    document.getElementById('app-container')\n  )\n}\nexport default entryPoint\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"@resolve-js/react-hooks:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { ResolveProvider } from '@resolve-js/react-hooks'\n...\nconst entryPoint = (clientContext) => {\n  const appContainer = document.createElement('div')\n  document.body.appendChild(appContainer)\n  render(\n    <ResolveProvider context={clientContext}>\n      <BrowserRouter>{renderRoutes(routes)}</BrowserRouter>\n    </ResolveProvider>,\n    appContainer\n  )\n}\nexport default\n")),(0,l.kt)("h3",{id:"ssr-handlers"},"SSR Handlers"),(0,l.kt)("p",null,"To use Server-Side Rendering (SSR) in your application, you need to implement one or more handlers that pre-render the client application's markup on the server."),(0,l.kt)("p",null,"An SSR handler is an asynchronous function that receives the ",(0,l.kt)("inlineCode",{parentName:"p"},"resolveContext")," along with a request and response objects. As the result of its execution, an SSR handler should send a response that contains the rendered markup:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const ssrHandler = async (\n  resolveContext,\n  req,\n  res\n) => {\n  ...\n  const markupHtml =\n    `<!doctype html>`\n      `<html ${helmet.htmlAttributes.toString()}>` +\n      ...\n      '</html>'\n  await res.end(markupHtml)\n}\n")),(0,l.kt)("p",null,"To enable server-side rendering, specify an array of server-side rendering scripts that target different environments in the ",(0,l.kt)("inlineCode",{parentName:"p"},"clientEntries")," configuration section:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"clientEntries: [\n  'client/index.js',\n  [\n    'client/ssr.js',\n    {\n      outputFile: 'common/local-entry/ssr.js',\n      moduleType: 'commonjs',\n      target: 'node',\n    },\n  ],\n  [\n    'client/ssr.js',\n    {\n      outputFile: 'common/cloud-entry/ssr.js',\n      moduleType: 'commonjs',\n      target: 'node',\n    },\n  ],\n]\n")),(0,l.kt)("p",null,"For more information on these settings, refer to the ",(0,l.kt)("a",{parentName:"p",href:"/resolve/docs/application-configuration#cliententries"},"Application Configuration")," article."),(0,l.kt)("p",null,"To serve SSR markup to the client, you need to register the ",(0,l.kt)("strong",{parentName:"p"},"live-require-handler.js")," API handler in the ",(0,l.kt)("strong",{parentName:"p"},"apiHandlers")," configuration section:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"config.app.js:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"...\napiHandlers: [\n  {\n    handler: {\n      module: {\n        package: '@resolve-js/runtime-base',\n        import: 'liveRequireHandler',\n      },\n      options: {\n        modulePath: './ssr.js',\n        moduleFactoryImport: false\n      }\n    },\n    path: '/:markup*',\n    method: 'GET'\n  }\n],\n...\n")),(0,l.kt)("h2",{id:"http-api"},"HTTP API"),(0,l.kt)("p",null,"A reSolve exposes HTTP API that you can use to send aggregate commands and query Read Models. The following endpoints are available."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Purpose"),(0,l.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,l.kt)("th",{parentName:"tr",align:null},"Method"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Send a command"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"http://{host}:{port}/api/commands")),(0,l.kt)("td",{parentName:"tr",align:null},"POST")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Query a Read Model"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"http://{host}:{port}/api/query/{readModel}/{resolver}")),(0,l.kt)("td",{parentName:"tr",align:null},"POST")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Query a View Model"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"http://{host}:{port}/api/query/{viewModel}/{aggregateIds}")),(0,l.kt)("td",{parentName:"tr",align:null},"GET")))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"The code sample below demonstrates how you can implement JavaScript functions used to communicate with a reSolve server through its HTTP API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const apiCommandsUrl = '/api/commands'\nconst apiQueryUrl = '/api/query'\n\nconst sendCommand = async ({\n  aggregateName,\n  aggregateId,\n  type,\n  payload,\n  jwt,\n}) => {\n  await fetch(apiCommandsUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${jwt}`,\n    },\n    body: JSON.stringify({\n      aggregateName,\n      aggregateId,\n      type,\n      payload,\n    }),\n  })\n}\n\nconst queryReadModel = async (readModelName, resolver, parameters, jwt) => {\n  const requestUrl = `${apiQueryUrl}/${readModelName}/${resolver}`\n  const res = await fetch(requestUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${jwt}`,\n    },\n    body: JSON.stringify(parameters),\n  })\n  return await res.json()\n}\n\nconst queryViewModel = async (viewModelName, aggregateIds, jwt) => {\n  const requestUrl = `${apiQueryUrl}/${viewModelName}/${aggregateIds.join(',')}`\n  const res = await fetch(requestUrl, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n    },\n  })\n  return await res.json()\n}\n")),(0,l.kt)("p",null,"For more information on the HTTP API, refer to the following help topic: ",(0,l.kt)("a",{parentName:"p",href:"/resolve/docs/api/client/http-api"},"API Reference"),"."),(0,l.kt)("p",null,"You can extend a reSolve server's API with API Handlers. Refer to the following help topic for more information: ",(0,l.kt)("a",{parentName:"p",href:"/resolve/docs/api-handlers"},"API Handlers"),"."),(0,l.kt)("h2",{id:"resolve-jsclient-library"},"@resolve-js/client library"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/client")," library exposes an interface that you can use to communicate with the reSolve backend from JavaScript code. To initialize the client, call the library's ",(0,l.kt)("inlineCode",{parentName:"p"},"getClient")," function. This function takes a reSolve context as a parameter and returns an initialized client object. This object exposes the following functions:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#command"},"command")),(0,l.kt)("td",{parentName:"tr",align:null},"Sends an aggregate command to the backend.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#query"},"query")),(0,l.kt)("td",{parentName:"tr",align:null},"Queries a Read Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#getstaticasseturl"},"getStaticAssetUrl")),(0,l.kt)("td",{parentName:"tr",align:null},"Gets a static file's full URL.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#getoriginpath"},"getOriginPath")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns an absolute URL within the application for the given relative path.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#subscribe"},"subscribe")),(0,l.kt)("td",{parentName:"tr",align:null},"Subscribes to View Model updates.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client#unsubscribe"},"unsubscribe")),(0,l.kt)("td",{parentName:"tr",align:null},"Unsubscribes from View Model updates.")))),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/reimagined/resolve/tree/master/templates/js/vanilla"},"with-vanilajs")," template project demonstrates how to use the ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/client")," library to implement a frontend for a reSolve application in pure JavaScript."),(0,l.kt)("h2",{id:"resolve-jsredux-library"},"@resolve-js/redux library"),(0,l.kt)("p",null,"The reSolve framework includes the client ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/redux")," library used to connect a client React + Redux app to a reSolve-powered backend."),(0,l.kt)("p",null,"Use the following @resolve-js/redux library's hooks and Higher-Order Components (HOCs) to connect react components to the backend."),(0,l.kt)("h3",{id:"react-hooks"},"React Hooks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#usereduxcommand"},"useReduxCommand")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a hook to execute a command.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#usereduxreadmodel"},"useReduxReadModel")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a hook to query a Read Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#usereduxreadmodelselector"},"useReduxReadModelSelector")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a hook to access a Read Model query result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#usereduxviewmodel"},"useReduxViewModel")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a hook to receive a View Model's state updates and reactive events.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#usereduxviewmodelselector"},"useReduxViewModelSelector")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a hook to access a View Model's current state on the client.")))),(0,l.kt)("h3",{id:"higher-order-components"},"Higher-Order Components"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#connectviewmodel"},"connectViewModel")),(0,l.kt)("td",{parentName:"tr",align:null},"Connects a React component to a reSolve View Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#connectreadmodel"},"connectReadModel")),(0,l.kt)("td",{parentName:"tr",align:null},"Connects a React component to a reSolve Read Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#connectrootbasedurls"},"connectRootBasedUrls")),(0,l.kt)("td",{parentName:"tr",align:null},"Fixes URLs passed to the specified props so that they use the correct root folder path.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-redux#connectstaticbasedurls"},"connectStaticBasedUrls")),(0,l.kt)("td",{parentName:"tr",align:null},"Fixes URLs passed to the specified props so that they use the correct static resource folder path.")))),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/reimagined/resolve/tree/master/examples/js/shopping-list-redux-hoc"},"shopping-list-redux-hoc")," example application demonstrates how to use the ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/redux")," library to implement a react-redux frontend for a reSolve application."),(0,l.kt)("h2",{id:"resolve-jsreact-hooks-library"},"@resolve-js/react-hooks library"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/react-hooks")," library includes React hooks that you can use to connect React components to a reSolve backend. The following hooks are included:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Hook"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#useclient"},"use\u0421lient")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the ",(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-client"},"@resolve-js/client")," library's ",(0,l.kt)("inlineCode",{parentName:"td"},"client")," object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#usecommand"},"useCommand")),(0,l.kt)("td",{parentName:"tr",align:null},"Initializes a command that can be passed to the backend.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#usecommandbuilder"},"useCommandBuilder")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows a component to generate commands based on input parameters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#useviewmodel"},"useViewModel")),(0,l.kt)("td",{parentName:"tr",align:null},"Establishes a WebSocket connection to a reSolve View Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#usequery"},"useQuery")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows a component to send queries to a reSolve Read Model or View Model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#usequerybuilder"},"useQueryBuilder")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows a component to generate queries based on input parameters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#useoriginresolver"},"useOriginResolver")),(0,l.kt)("td",{parentName:"tr",align:null},"Resolves a relative path to an absolute URL within the application.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/resolve/docs/api/client/resolve-react-hooks#usestaticresolver"},"useStaticResolver")),(0,l.kt)("td",{parentName:"tr",align:null},"Resolves a relative path to a static resource's full URL.")))),(0,l.kt)("h3",{id:"example-3"},"Example"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/reimagined/resolve/tree/master/examples/js/shopping-list"},"shopping-list-with-hooks")," example application demonstrates how to use the ",(0,l.kt)("strong",{parentName:"p"},"@resolve-js/react-hooks")," library to communicate with a reSolve backend."))}u.isMDXComponent=!0},5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);