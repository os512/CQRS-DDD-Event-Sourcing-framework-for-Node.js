"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","collapsed":true,"collapsible":true,"label":"Docs Index","items":[{"type":"link","label":"Introduction","href":"/resolve/docs/","docId":"introduction"},{"type":"link","label":"Getting Started","href":"/resolve/docs/getting-started","docId":"getting-started"},{"type":"link","label":"Step-by-Step Tutorial","href":"/resolve/docs/tutorial","docId":"tutorial"},{"type":"category","label":"Basics","items":[{"type":"link","label":"Write Side","href":"/resolve/docs/write-side","docId":"write-side"},{"type":"link","label":"Read Side","href":"/resolve/docs/read-side","docId":"read-side"},{"type":"link","label":"Sagas","href":"/resolve/docs/sagas","docId":"sagas"},{"type":"link","label":"Adapters","href":"/resolve/docs/adapters","docId":"adapters"},{"type":"link","label":"API Handlers","href":"/resolve/docs/api-handlers","docId":"api-handlers"},{"type":"link","label":"Middleware","href":"/resolve/docs/middleware","docId":"middleware"},{"type":"link","label":"Frontend","href":"/resolve/docs/frontend","docId":"frontend"},{"type":"link","label":"reSolve App Structure","href":"/resolve/docs/app-structure","docId":"app-structure"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Manage an Application","href":"/resolve/docs/manage-application","docId":"manage-application"},{"type":"link","label":"Modules","href":"/resolve/docs/modules","docId":"modules"},{"type":"link","label":"Authentication and Authorization","href":"/resolve/docs/authentication-and-authorization","docId":"authentication-and-authorization"},{"type":"link","label":"Encryption","href":"/resolve/docs/encryption","docId":"encryption"},{"type":"link","label":"Custom Read Model Connectors","href":"/resolve/docs/custom-read-model-connectors","docId":"custom-read-model-connectors"},{"type":"link","label":"File Upload","href":"/resolve/docs/file-upload","docId":"file-upload"},{"type":"link","label":"Event Export and Import","href":"/resolve/docs/export-import","docId":"export-import"},{"type":"link","label":"Preparing for Production","href":"/resolve/docs/preparing-for-production","docId":"preparing-for-production"},{"type":"link","label":"Running in Containers","href":"/resolve/docs/running-in-containers","docId":"running-in-containers"},{"type":"link","label":"Code Splitting","href":"/resolve/docs/code-splitting","docId":"code-splitting"},{"type":"link","label":"Debugging","href":"/resolve/docs/debugging","docId":"debugging"},{"type":"link","label":"Testing","href":"/resolve/docs/testing","docId":"testing"},{"type":"link","label":"Monitoring","href":"/resolve/docs/monitoring","docId":"monitoring"},{"type":"link","label":"Contributing","href":"/resolve/docs/contributing","docId":"contributing"}],"collapsible":true,"collapsed":true},{"type":"category","label":"API","items":[{"type":"category","label":"Aggregate","items":[{"type":"link","label":"Command Handler","href":"/resolve/docs/api/aggregate/command-handler","docId":"api/aggregate/command-handler"},{"type":"link","label":"Projection","href":"/resolve/docs/api/aggregate/projection","docId":"api/aggregate/projection"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Read Model","items":[{"type":"link","label":"Projection","href":"/resolve/docs/api/read-model/projection","docId":"api/read-model/projection"},{"type":"link","label":"Resolver","href":"/resolve/docs/api/read-model/resolver","docId":"api/read-model/resolver"},{"type":"link","label":"Store","href":"/resolve/docs/api/read-model/store","docId":"api/read-model/store"},{"type":"link","label":"Connector","href":"/resolve/docs/api/read-model/connector","docId":"api/read-model/connector"},{"type":"link","label":"Query","href":"/resolve/docs/api/read-model/query","docId":"api/read-model/query"}],"collapsible":true,"collapsed":true},{"type":"category","label":"View Model","items":[{"type":"link","label":"Projection","href":"/resolve/docs/api/view-model/projection","docId":"api/view-model/projection"},{"type":"link","label":"Resolver","href":"/resolve/docs/api/view-model/resolver","docId":"api/view-model/resolver"},{"type":"link","label":"Query","href":"/resolve/docs/api/view-model/query","docId":"api/view-model/query"}],"collapsible":true,"collapsed":true},{"type":"category","label":"API Handler","items":[{"type":"link","label":"API Handler","href":"/resolve/docs/api/api-handler/","docId":"api/api-handler/api-handler"},{"type":"link","label":"ReSolve Context","href":"/resolve/docs/api/api-handler/resolve-context","docId":"api/api-handler/resolve-context"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Monitoring","items":[{"type":"link","label":"Monitoring Interface","href":"/resolve/docs/api/monitoring/","docId":"api/monitoring/monitoring"},{"type":"link","label":"Monitoring Adapter","href":"/resolve/docs/api/monitoring/monitoring-adapter","docId":"api/monitoring/monitoring-adapter"},{"type":"link","label":"Monitoring Metric","href":"/resolve/docs/api/monitoring/metric","docId":"api/monitoring/metric"}],"collapsible":true,"collapsed":true},{"type":"link","label":"Saga","href":"/resolve/docs/api/saga","docId":"api/saga"},{"type":"link","label":"Command","href":"/resolve/docs/api/command","docId":"api/command"},{"type":"link","label":"Event","href":"/resolve/docs/api/event","docId":"api/event"},{"type":"link","label":"Event Store Adapter","href":"/resolve/docs/api/event-store-adapter","docId":"api/event-store-adapter"},{"type":"link","label":"Middleware","href":"/resolve/docs/api/middleware","docId":"api/middleware"},{"type":"link","label":"reSolve Scripts","href":"/resolve/docs/api/resolve-scripts","docId":"api/resolve-scripts"},{"type":"category","label":"Client API","items":[{"type":"link","label":"HTTP API","href":"/resolve/docs/api/client/http-api","docId":"api/client/http-api"},{"type":"link","label":"Client Entry Point","href":"/resolve/docs/api/client/entry-point","docId":"api/client/entry-point"},{"type":"link","label":"@resolve-js/redux","href":"/resolve/docs/api/client/resolve-redux","docId":"api/client/resolve-redux"},{"type":"link","label":"@resolve-js/client","href":"/resolve/docs/api/client/resolve-client","docId":"api/client/resolve-client"},{"type":"link","label":"@resolve-js/react-hooks","href":"/resolve/docs/api/client/resolve-react-hooks","docId":"api/client/resolve-react-hooks"},{"type":"link","label":"Request Middleware","href":"/resolve/docs/api/client/request-middleware","docId":"api/client/request-middleware"}],"collapsible":true,"collapsed":true}],"collapsible":true,"collapsed":true},{"type":"link","label":"Configuration","href":"/resolve/docs/application-configuration","docId":"application-configuration"},{"type":"link","label":"FAQ","href":"/resolve/docs/faq","docId":"faq"},{"type":"link","label":"Troubleshooting","href":"/resolve/docs/troubleshooting","docId":"troubleshooting"}]}]},"docs":{"adapters":{"id":"adapters","title":"Adapters","description":"ReSolve uses the adapter mechanism to provide an abstraction layer above APIs used by its subsystems. For instance, adapters are used to define how a reSolve application stores its data. This allows reSolve to abstract away all direct interactions with the underlying storage and expose a unified data management API.","sidebar":"docs"},"api-handlers":{"id":"api-handlers","title":"API Handlers","description":"Use API Handlers to provide your reSolve server with the capability to handle arbitrary HTTP requests.","sidebar":"docs"},"api/aggregate/command-handler":{"id":"api/aggregate/command-handler","title":"Command Handler","description":"A command handler function has the following structure:","sidebar":"docs"},"api/aggregate/projection":{"id":"api/aggregate/projection","title":"Projection","description":"An aggregate projection is an object of the following structure:","sidebar":"docs"},"api/api-handler/api-handler":{"id":"api/api-handler/api-handler","title":"API Handler","description":"This article describes the structure of an API handler function and its arguments.","sidebar":"docs"},"api/api-handler/resolve-context":{"id":"api/api-handler/resolve-context","title":"ReSolve Context","description":"The \'resolve\' context object is available to an API handler function through its request (req) argument. This object implements a communication layer between an API handler and the reSolve framework.","sidebar":"docs"},"api/client/entry-point":{"id":"api/client/entry-point","title":"Client Entry Point","description":"The entry point is a function that is the first to be called when the client script runs.","sidebar":"docs"},"api/client/http-api":{"id":"api/client/http-api","title":"HTTP API","description":"ReSolve exposes an HTTP API that allows you to send aggregate commands, and query Read and View Models.","sidebar":"docs"},"api/client/request-middleware":{"id":"api/client/request-middleware","title":"Request Middleware","description":"Middleware implements intermediate logic that can modify the response object or handle errors before they are passed to the callback function.","sidebar":"docs"},"api/client/resolve-client":{"id":"api/client/resolve-client","title":"@resolve-js/client","description":"The @resolve-js/client library exposes an interface that you can use to communicate with the reSolve backend from JavaScript code.","sidebar":"docs"},"api/client/resolve-react-hooks":{"id":"api/client/resolve-react-hooks","title":"@resolve-js/react-hooks","description":"The @resolve-js/react-hooks library exposes React hooks that you can use to connect React components to a reSolve backend.","sidebar":"docs"},"api/client/resolve-redux":{"id":"api/client/resolve-redux","title":"@resolve-js/redux","description":"The reSolve framework includes the client @resolve-js/redux library used to connect a client React + Redux app to a reSolve-powered backend.","sidebar":"docs"},"api/command":{"id":"api/command","title":"Command","description":"Command Object","sidebar":"docs"},"api/event":{"id":"api/event","title":"Event","description":"An event is an object of the following structure:","sidebar":"docs"},"api/event-store-adapter":{"id":"api/event-store-adapter","title":"Event Store Adapter","description":"Event Store adapters expose the following API that allows you to communicate with the underlying event store.","sidebar":"docs"},"api/middleware":{"id":"api/middleware","title":"Middleware","description":"This document describes API used by Aggregate and Read Model middleware.","sidebar":"docs"},"api/monitoring/metric":{"id":"api/monitoring/metric","title":"Monitoring Metric","description":"Metric Object","sidebar":"docs"},"api/monitoring/monitoring":{"id":"api/monitoring/monitoring","title":"Monitoring Interface","description":"A monitoring object\'s interface doubles the interface of a monitoring adapter except for the getMetrics and clearMetrics methods that require a monitoring adapted ID as an argument.","sidebar":"docs"},"api/monitoring/monitoring-adapter":{"id":"api/monitoring/monitoring-adapter","title":"Monitoring Adapter","description":"This document describes the interface that a monitoring adapter should expose.","sidebar":"docs"},"api/read-model/connector":{"id":"api/read-model/connector","title":"Connector","description":"This document describes the interface that a read model connector should expose.","sidebar":"docs"},"api/read-model/projection":{"id":"api/read-model/projection","title":"Projection","description":"A read model projection is an object of the following structure:","sidebar":"docs"},"api/read-model/query":{"id":"api/read-model/query","title":"Query","description":"Query Object","sidebar":"docs"},"api/read-model/resolver":{"id":"api/read-model/resolver","title":"Resolver","description":"A resolver is the part of a Read Model that handles data requests.","sidebar":"docs"},"api/read-model/store":{"id":"api/read-model/store","title":"Store","description":"This document describes functions that you can use to communicate with a Read Model store through a `store` object.","sidebar":"docs"},"api/resolve-scripts":{"id":"api/resolve-scripts","title":"reSolve Scripts","description":"This document describes service scripts used to configure, build, and run reSolve applications.","sidebar":"docs"},"api/saga":{"id":"api/saga","title":"Saga","description":"This document describes API used by sagas.","sidebar":"docs"},"api/view-model/projection":{"id":"api/view-model/projection","title":"Projection","description":"A view model projection is an object of the following structure:","sidebar":"docs"},"api/view-model/query":{"id":"api/view-model/query","title":"Query","description":"Query Object","sidebar":"docs"},"api/view-model/resolver":{"id":"api/view-model/resolver","title":"Resolver","description":"A view model resolver function has the following structure:","sidebar":"docs"},"app-structure":{"id":"app-structure","title":"reSolve App Structure","description":"This article describes the typical structure of a reSolve application.","sidebar":"docs"},"application-configuration":{"id":"application-configuration","title":"Configuration","description":"This document lists configuration options available for a reSolve application.","sidebar":"docs"},"authentication-and-authorization":{"id":"authentication-and-authorization","title":"Authentication and Authorization","description":"You can use reSolve\'s built-in authentication module to enable authentication in your application.","sidebar":"docs"},"code-splitting":{"id":"code-splitting","title":"Code Splitting","description":"ReSolve uses webpack to transpile and bundle the application code so it can run on client browsers, the server and serverless platforms.","sidebar":"docs"},"contributing":{"id":"contributing","title":"Contributing","description":"This is a set of guidelines for contributing to reSolve and its packages hosted in the ReImagined project on GitHub.","sidebar":"docs"},"custom-read-model-connectors":{"id":"custom-read-model-connectors","title":"Custom Read Model Connectors","description":"You can implement a custom Read Model connector to define how a Read Model\'s data is stored. A connector implements the following functions:","sidebar":"docs"},"debugging":{"id":"debugging","title":"Debugging","description":"This document describes how to debug the reSolve framework and reSolve-based applications.","sidebar":"docs"},"encryption":{"id":"encryption","title":"Encryption","description":"Overview","sidebar":"docs"},"export-import":{"id":"export-import","title":"Event Export and Import","description":"Export/Import API","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"This article answers frequently asked questions about the reSolve framework.","sidebar":"docs"},"file-upload":{"id":"file-upload","title":"File Upload","description":"The @resolve-js/module-uploader module implements the file upload functionality. You can enable this module as shown below:","sidebar":"docs"},"frontend":{"id":"frontend","title":"Frontend","description":"This document describes techniques that you can use to implement a frontend for a reSolve application.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"The reSolve Framework","sidebar":"docs"},"index":{"id":"index","title":"reSolve Documentation","description":"Full stack CQRS, DDD, Event Sourcing framework for Node.js"},"introduction":{"id":"introduction","title":"Introduction","description":"Full stack CQRS, DDD, Event Sourcing framework for Node.js","sidebar":"docs"},"manage-application":{"id":"manage-application","title":"Manage an Application","description":"Use the module-admin CLI tool to manage a reSolve application\'s sagas and read models.","sidebar":"docs"},"middleware":{"id":"middleware","title":"Middleware","description":"This topic describes how to use middleware in aggregates, read model resolvers, and projections.","sidebar":"docs"},"modules":{"id":"modules","title":"Modules","description":"In reSolve, a module encapsulates a fragment of functionality that can be included by an application. A module can include any structural parts of a reSolve application in any combination.","sidebar":"docs"},"monitoring":{"id":"monitoring","title":"Monitoring","description":"ReSolve includes an inbuilt monitoring mechanism that allows a reSolve application to collect and publish various metrics during its execution.","sidebar":"docs"},"preparing-for-production":{"id":"preparing-for-production","title":"Preparing for Production","description":"This document describes how to prepare a reSolve application for deployment to a production server environment.","sidebar":"docs"},"read-side":{"id":"read-side","title":"Read Side","description":"The reSolve framework\'s read side listens to events that the write side produces. Based on these events, the read side updates the read models that supply data to the queries.","sidebar":"docs"},"running-in-containers":{"id":"running-in-containers","title":"Running in Containers","description":"This article describes how to run a reSolve application in a container as a part of a Docker Compose setup. In addition to the reSolve application, this setup uses the following Docker images available on Docker Hub:","sidebar":"docs"},"sagas":{"id":"sagas","title":"Sagas","description":"A saga describes a long running process as a sequence of events.","sidebar":"docs"},"testing":{"id":"testing","title":"Testing","description":"This document describes how to write tests for a reSolve application.","sidebar":"docs"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"This document describes how to solve popular issues with reSolve applications.","sidebar":"docs"},"tutorial":{"id":"tutorial","title":"Step-by-Step Tutorial","description":"In this tutorial, you will develop a ShoppingList application and learn fundamental concepts of the reSolve framework.","sidebar":"docs"},"write-side":{"id":"write-side","title":"Write Side","description":"An application\'s write side handles commands, validates input data, and emits events based on valid commands.","sidebar":"docs"}}}')}}]);