"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8810],{9106:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>c,toc:()=>d,default:()=>u});var o=t(2685),r=t(1244),a=(t(7378),t(5318)),i=["components"],s={id:"running-in-containers",title:"Running in Containers"},l=void 0,c={unversionedId:"running-in-containers",id:"running-in-containers",title:"Running in Containers",description:"This article describes how to run a reSolve application in a container as a part of a Docker Compose setup. In addition to the reSolve application, this setup uses the following Docker images available on Docker Hub:",source:"@site/../docs/running-in-containers.md",sourceDirName:".",slug:"/running-in-containers",permalink:"/resolve/docs/running-in-containers",tags:[],version:"current",frontMatter:{id:"running-in-containers",title:"Running in Containers"},sidebar:"docs",previous:{title:"Preparing for Production",permalink:"/resolve/docs/preparing-for-production"},next:{title:"Code Splitting",permalink:"/resolve/docs/code-splitting"}},d=[{value:"1. Configure the reSolve Application",id:"1-configure-the-resolve-application",children:[],level:2},{value:"2. Configure PostgreSQL",id:"2-configure-postgresql",children:[],level:2},{value:"3. Configure Nginx",id:"3-configure-nginx",children:[],level:2},{value:"4. Prepare the Dockerfile",id:"4-prepare-the-dockerfile",children:[],level:2},{value:"5. Configure Docker Compose",id:"5-configure-docker-compose",children:[],level:2},{value:"6. Build the Image and Run the Container",id:"6-build-the-image-and-run-the-container",children:[],level:2},{value:"See the Example",id:"see-the-example",children:[],level:2}],p={toc:d};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This article describes how to run a reSolve application in a container as a part of a Docker Compose setup. In addition to the reSolve application, this setup uses the following Docker images available on ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"Docker Hub"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/postgres"},(0,a.kt)("inlineCode",{parentName:"a"},"postgres"))," is used to store the application's data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/nginx"},(0,a.kt)("inlineCode",{parentName:"a"},"nginx"))," is used as a reverse proxy server to answer HTTP requests.")),(0,a.kt)("p",null,"Follow the steps below to run a reSolve application in a Docker container."),(0,a.kt)("h2",{id:"1-configure-the-resolve-application"},"1. Configure the reSolve Application"),(0,a.kt)("p",null,"Add a separate application configuration file used to build the application as a part of a Docker image:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/config.docker.js"',title:'"/config.docker.js"'},"import { declareRuntimeEnv } from '@resolve-js/scripts'\n\nconst dockerConfig = {\n  mode: 'production',\n  runtime: {\n    module: '@resolve-js/runtime-single-process',\n    options: {\n      host: declareRuntimeEnv('HOST', 'localhost'),\n      port: declareRuntimeEnv('PORT', '3000'),\n    },\n  },\n  eventstoreAdapter: {\n    module: '@resolve-js/eventstore-postgresql',\n    options: {\n      databaseName: declareRuntimeEnv('RESOLVE_EVENT_STORE_DATABASE_NAME'),\n      host: declareRuntimeEnv('RESOLVE_EVENT_STORE_CLUSTER_HOST'),\n      port: declareRuntimeEnv('RESOLVE_EVENT_STORE_CLUSTER_PORT'),\n      user: declareRuntimeEnv('RESOLVE_USER'),\n      password: declareRuntimeEnv('RESOLVE_USER_PASSWORD'),\n      database: 'postgres',\n    },\n  },\n  readModelConnectors: {\n    default: {\n      module: '@resolve-js/readmodel-postgresql',\n      options: {\n        databaseName: declareRuntimeEnv('RESOLVE_READMODEL_DATABASE_NAME'),\n        host: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_HOST'),\n        port: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_PORT'),\n        user: declareRuntimeEnv('RESOLVE_USER'),\n        password: declareRuntimeEnv('RESOLVE_USER_PASSWORD'),\n        database: 'postgres',\n      },\n    },\n    hackerNews: {\n      module: '@resolve-js/readmodel-postgresql',\n      options: {\n        databaseName: declareRuntimeEnv('RESOLVE_READMODEL_DATABASE_NAME'),\n        host: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_HOST'),\n        port: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_PORT'),\n        user: declareRuntimeEnv('RESOLVE_USER'),\n        password: declareRuntimeEnv('RESOLVE_USER_PASSWORD'),\n        database: 'postgres',\n      },\n    },\n    comments: {\n      module: '@resolve-js/readmodel-postgresql',\n      options: {\n        databaseName: declareRuntimeEnv('RESOLVE_READMODEL_DATABASE_NAME'),\n        host: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_HOST'),\n        port: declareRuntimeEnv('RESOLVE_READMODEL_CLUSTER_PORT'),\n        user: declareRuntimeEnv('RESOLVE_USER'),\n        password: declareRuntimeEnv('RESOLVE_USER_PASSWORD'),\n        database: 'postgres',\n      },\n    },\n    elasticSearch: {\n      module: 'common/read-models/elastic-search-connector.ts',\n      options: {\n        /*\n        host: '<your-production-elastic-search-host>'\n        */\n      },\n    },\n  },\n  jwtCookie: {\n    name: 'jwt',\n    maxAge: 31536000000,\n  },\n}\n\nexport default dockerConfig\n")),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"'build:docker'")," launch mode to the application's ",(0,a.kt)("inlineCode",{parentName:"p"},"run.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/run.js"',title:'"/run.js"'},"import dockerConfig from './config.docker'\n...\nvoid (async () => {\n  try {\n    ...\n    switch (launchMode) {\n      ...\n      case 'build:docker': {\n        const resolveConfig = merge(baseConfig, dockerConfig)\n        await build(resolveConfig, adjustWebpackConfigs)\n        break\n      }\n    }\n  } catch (error) {\n    await stop(error)\n  }\n})()\n")),(0,a.kt)("p",null,"Finally, register a ",(0,a.kt)("inlineCode",{parentName:"p"},'"build:docker"')," script in the application's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="/package.json"',title:'"/package.json"'},'...\n"scripts": {\n    ...\n    "build:docker": "ts-node run.ts build:docker",\n    ...\n}\n...\n')),(0,a.kt)("h2",{id:"2-configure-postgresql"},"2. Configure PostgreSQL"),(0,a.kt)("p",null,"The official ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres/"},"PostgreSQL")," docker image runs SQL scripts found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/docker-entrypoint-initdb.d/")," folder to initialize the hosted databases."),(0,a.kt)("p",null,"To define the database credentials and schemas required to run reSolve, create a directory to mount as the ",(0,a.kt)("inlineCode",{parentName:"p"},"/docker-entrypoint-initdb.d/")," volume and add the following script to this directory:"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The code sample below contains example PostgreSQL user credentials. Make sure you replace these credentials in your application."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="/docker/volumes/postgres/docker-entrypoint-initdb.d/init-schemas.sql"',title:'"/docker/volumes/postgres/docker-entrypoint-initdb.d/init-schemas.sql"'},'\\c postgres;\n-- Add user credentials for your reSolve application.\nCREATE USER "hn-user";\nALTER USER "hn-user" PASSWORD \'QweZxc123\';\n\n-- Grant the created user the required rights.\nCREATE SCHEMA "event-store";\nGRANT USAGE ON SCHEMA "event-store" TO "hn-user";\nGRANT ALL ON SCHEMA "event-store" TO "hn-user";\nGRANT ALL ON ALL TABLES IN SCHEMA "event-store" TO "hn-user";\nGRANT ALL ON ALL SEQUENCES IN SCHEMA "event-store" TO "hn-user";\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA "event-store" TO "hn-user";\nALTER SCHEMA "event-store" OWNER TO "hn-user";\n\nCREATE SCHEMA "read-store";\nGRANT USAGE ON SCHEMA "read-store" TO "hn-user";\nGRANT ALL ON SCHEMA "read-store" TO "hn-user";\nGRANT ALL ON ALL TABLES IN SCHEMA "read-store" TO "hn-user";\nGRANT ALL ON ALL SEQUENCES IN SCHEMA "read-store" TO "hn-user";\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA "read-store" TO "hn-user";\nALTER SCHEMA "read-store" OWNER TO "hn-user";\n')),(0,a.kt)("h2",{id:"3-configure-nginx"},"3. Configure Nginx"),(0,a.kt)("p",null,"To configure the Nginx container, create a directory to mount as an ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/nginx/conf.d")," volume. In this directory, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"default.conf")," file with the reverse proxy server configuration that meets your requirements. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="/docker/volumes/nginx/conf.d/default.conf"',title:'"/docker/volumes/nginx/conf.d/default.conf"'},'server {\n  listen 80;\n\n  location / {\n    proxy_pass http://server:3000;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection "upgrade";\n  }\n}\n')),(0,a.kt)("h2",{id:"4-prepare-the-dockerfile"},"4. Prepare the Dockerfile"),(0,a.kt)("p",null,"The example Dockerfile below demonstrates how to build a Docker image for a reSolve application based on an official ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/node"},(0,a.kt)("inlineCode",{parentName:"a"},"node"))," image.\nThe image is built in stages to optimize the image size. See the comments in the code for more information on each stage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="/Dockerfile"',title:'"/Dockerfile"'},'# Build stage: install all dependencies and build app\nFROM node:14.17-alpine as build\n\nWORKDIR /src\n\nCOPY package.json package.json\n\nCOPY .babelrc .babelrc\nCOPY tsconfig.json tsconfig.json\n\nRUN yarn install --ignore-scripts\n\nCOPY run.ts run.ts\nCOPY config.adjust-webpack.ts config.adjust-webpack.ts\nCOPY config.app.ts config.app.ts\nCOPY config.cloud.common.ts config.cloud.common.ts\nCOPY config.cloud.replica.ts config.cloud.replica.ts\nCOPY config.cloud.ts config.cloud.ts\nCOPY config.dev.common.ts config.dev.common.ts\nCOPY config.dev.replica.ts config.dev.replica.ts\nCOPY config.dev.ts config.dev.ts\nCOPY config.prod.ts config.prod.ts\nCOPY config.docker.ts config.docker.ts\nCOPY config.test-functional.ts config.test-functional.ts\nCOPY types.ts types.ts\nCOPY auth auth\nCOPY client client\nCOPY common common\nCOPY import import\nCOPY static static\n\nRUN yarn build:docker\n\n# Dependencies stage: install production dependencies\nFROM node:14.17-alpine as dependencies\n\nWORKDIR /src\n\nCOPY package.json package.json\n\nRUN yarn install --ignore-scripts --production\n\n# Main stage: copy production dependencies, build and static files\nFROM node:14.17-alpine\n\nCOPY static static\nCOPY --from=dependencies /src .\nCOPY --from=build /src/dist dist\n\nEXPOSE 3000\n\nCMD ["node", "dist/common/local-entry/local-entry.js"]\n')),(0,a.kt)("h2",{id:"5-configure-docker-compose"},"5. Configure Docker Compose"),(0,a.kt)("p",null,"Add a Docker Compose configuration file used to run your reSolve application's container along with the PostgreSQL and Nginx containers:"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The code sample below contains example PostgreSQL user and admin credentials. Make sure you replace these credentials in your application."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/docker-compose.yml"',title:'"/docker-compose.yml"'},"version: '3'\nservices:\n  postgres:\n    image: postgres:14.1\n    environment:\n      POSTGRES_USER: 'hn-admin'\n      POSTGRES_PASSWORD: 'pRWGAqCEq4'\n    volumes:\n      - ./docker/volumes/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro\n\n  server:\n    build:\n      dockerfile: ./Dockerfile\n      context: .\n    environment:\n      HOST: '0.0.0.0'\n      RESOLVE_EVENT_STORE_DATABASE_NAME: 'event-store'\n      RESOLVE_EVENT_STORE_CLUSTER_HOST: 'postgres'\n      RESOLVE_EVENT_STORE_CLUSTER_PORT: '5432'\n      RESOLVE_READMODEL_DATABASE_NAME: 'read-store'\n      RESOLVE_READMODEL_CLUSTER_HOST: 'postgres'\n      RESOLVE_READMODEL_CLUSTER_PORT: '5432'\n      RESOLVE_USER: 'hn-user'\n      RESOLVE_USER_PASSWORD: 'QweZxc123'\n    depends_on:\n      - postgres\n\n  nginx:\n    image: nginx:1.17\n    ports:\n      - '3000:80'\n    depends_on:\n      - server\n    volumes:\n      - ./docker/volumes/nginx/conf.d:/etc/nginx/conf.d:ro\n\nnetworks:\n  default:\n    driver: bridge\n")),(0,a.kt)("p",null,"You can define an additional configuration file to use in the production environment. For example, the sample configuration below demonstrates how to specify a volume to store PostgreSQL data in production:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/docker-compose-production.yml"',title:'"/docker-compose-production.yml"'},"version: '3'\nservices:\n  postgres:\n    volumes:\n      - ./docker/volumes/postgres/data:/var/lib/postgresql/data\n")),(0,a.kt)("h2",{id:"6-build-the-image-and-run-the-container"},"6. Build the Image and Run the Container"),(0,a.kt)("p",null,"Use the following console input to download the official PostgreSQL image and run it in Docker Compose so it executes the initialization script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up -d postgres\n")),(0,a.kt)("p",null,"Type the following to build and run your application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up -d\n")),(0,a.kt)("p",null,"Type the following to use the production configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.yml -f docker-compose-production.yml up -d\n")),(0,a.kt)("h2",{id:"see-the-example"},"See the Example"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/reimagined/resolve/tree/dev/examples/js/hacker-news"},"Hacker News")," example project contains all configuration files required to build a docker image and run it with Docker Compose as described in this article."))}u.isMDXComponent=!0},5318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?o.createElement(g,i(i({ref:n},d),{},{components:t})):o.createElement(g,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);